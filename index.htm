<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8" />
  <title>Planning Poker</title>
  <style>
    body {
      background: #f4f4f4;
      font-family: sans-serif;
      text-align: center;
      margin: 0;
      padding: 0;
    }

    h1 {
      margin-top: 30px;
    }

    #table {
      position: relative;
      width: 600px;
      height: 300px;
      margin: 40px auto;
      background-color: #c3a56c;
      border: 4px solid #7b5e2c;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }

    .hidden-card, .revealed-card {
      width: 70px;
      height: 100px;
      border: 2px solid #444;
      border-radius: 8px;
      position: absolute;
    }

    .hidden-card {
      background: repeating-linear-gradient(45deg, #999 0, #bbb 10px, #999 20px);
      cursor: not-allowed;
    }

    .revealed-card {
      background: #fff;
      font-size: 24px;
      font-weight: bold;
      line-height: 100px;
      text-align: center;
      color: #222;
      box-shadow: 0 0 8px rgba(0,0,0,0.4);
    }

    .top    { top: 0; left: 50%; transform: translate(-50%, 0); }
    .bottom { bottom: 0; left: 50%; transform: translate(-50%, 0); }
    .left   { top: 50%; left: 0; transform: translate(0, -50%); }
    .right  { top: 50%; right: 0; transform: translate(0, -50%); }

    #cards {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 100px;
      flex-wrap: wrap;
    }

    .card {
      width: 60px;
      height: 90px;
      background: #eee;
      border: 2px solid #333;
      border-radius: 8px;
      font-size: 24px;
      font-weight: bold;
      line-height: 90px;
      text-align: center;
      cursor: pointer;
      position: relative;
      z-index: 2;
      transition: transform 0.2s ease-out;
    }

    .card.returning {
      transition: transform 0.8s ease-in-out;
    }

    .floating-card {
      position: fixed;
      width: 60px;
      height: 90px;
      background: #fff;
      border: 2px solid #333;
      border-radius: 8px;
      font-size: 24px;
      font-weight: bold;
      line-height: 90px;
      text-align: center;
      z-index: 1000;
      pointer-events: none;
      transition: top 0.6s ease-out, left 0.6s ease-out;
    }

    .returning-card {
      position: fixed;
      width: 60px;
      height: 90px;
      background: #fff;
      border: 2px solid #999;
      border-radius: 8px;
      font-size: 24px;
      font-weight: bold;
      line-height: 90px;
      text-align: center;
      z-index: 999;
      pointer-events: none;
      transition: top 0.6s ease-in-out, left 0.6s ease-in-out;
      opacity: 0.6;
    }
  </style>
</head>
<body>
  <h1>Planning Poker</h1>

  <div id="table">
    <div class="hidden-card top"></div>
    <div class="hidden-card left"></div>
    <div class="hidden-card right"></div>
    <div id="bottomCard" class="hidden-card bottom"></div>
  </div>

  <div id="cards">
    <div class="card escape">1</div>
    <div class="card escape">2</div>
    <div class="card escape">3</div>
    <div class="card">4</div>
    <div class="card">5</div>
  </div>

  <script>
    const escapeCards = document.querySelectorAll('.card.escape');
    const allCards = document.querySelectorAll('.card');
    const bottomCard = document.getElementById('bottomCard');
    let lastValue = null;

    // Uciekające karty
    escapeCards.forEach(card => {
      let escaped = false;
      let canReact = true;

      card.addEventListener('mousemove', e => {
        if (!canReact || escaped) return;
        const rect = card.getBoundingClientRect();
        const dx = e.clientX - (rect.left + rect.width / 2);
        const dy = e.clientY - (rect.top + rect.height / 2);
        const distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < 100) {
          escaped = true;
          canReact = false;
          const angle = Math.atan2(dy, dx);
          const offsetX = Math.cos(angle) * (250 + Math.random() * 50);
          const offsetY = Math.sin(angle) * (250 + Math.random() * 50);
          card.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
        }
      });

      allCards.forEach(other => {
        if (other !== card) {
          other.addEventListener('mouseenter', () => {
            if (escaped) {
              card.classList.add('returning');
              card.style.transform = `translate(0, 0)`;
              setTimeout(() => {
                card.classList.remove('returning');
                canReact = true;
                escaped = false;
              }, 800);
            }
          });
        }
      });
    });

    // Animacja wyboru i powrotu poprzedniej karty
    allCards.forEach(card => {
      card.addEventListener('click', () => {
        const val = card.textContent;

        // animacja powrotu poprzedniej
        if (lastValue !== null && lastValue !== val) {
          const cardToReturn = document.createElement('div');
          cardToReturn.className = 'returning-card';
          cardToReturn.textContent = lastValue;

          const bottomRect = bottomCard.getBoundingClientRect();
          const sourceRect = card.getBoundingClientRect();

          cardToReturn.style.left = bottomRect.left + 'px';
          cardToReturn.style.top = bottomRect.top + 'px';

          document.body.appendChild(cardToReturn);

          setTimeout(() => {
            cardToReturn.style.left = sourceRect.left + 'px';
            cardToReturn.style.top = sourceRect.top + 'px';
          }, 10);

          setTimeout(() => {
            document.body.removeChild(cardToReturn);
          }, 700);
        }

        lastValue = val;

        // animacja przesunięcia nowej
        const rect = card.getBoundingClientRect();
        const targetRect = bottomCard.getBoundingClientRect();

        const fly = document.createElement('div');
        fly.className = 'floating-card';
        fly.textContent = val;
        document.body.appendChild(fly);

        fly.style.left = rect.left + 'px';
        fly.style.top = rect.top + 'px';

        setTimeout(() => {
          fly.style.left = targetRect.left + 'px';
          fly.style.top = targetRect.top + 'px';
        }, 10);

        setTimeout(() => {
          bottomCard.className = 'revealed-card bottom';
          bottomCard.textContent = val;
          document.body.removeChild(fly);
        }, 700);
      });
    });
  </script>
</body>
</html>
